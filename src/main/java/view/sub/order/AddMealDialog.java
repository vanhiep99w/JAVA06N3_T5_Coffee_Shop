/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.sub.order;

import entities.Category;
import entities.Order;
import entities.Product;
import entities.Product_Order;
import entities.Table;
import entities.TableStatus;
import service.product.ProductService;
import service.product.ProductServiceImpl;
import service.product_order.ProductOrderService;
import util.ImageUtils;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import render.comboboxbutton.category.ButtonRender;
import service.category.CategoryService;
import service.category.CategoryServiceImpl;
import service.order.OrderService;
import service.order.OrderServiceImpl;
import service.product_order.ProductOrderServiceImpl;
import service.table.TableService;
import service.table.TableServiceImpl;
import util.URL_Factory;

/**
 *
 * @author Admin
 */
public class AddMealDialog extends javax.swing.JDialog {

    //Amount of SubAddMealPanel in pnProduct
    private int currentAmount = 0;
    //index of showing SubAddMealPanel 
    private int currentIndex = 1;

    private int orderAmount;
    private double sum;
    private double pay;
    private double vat;
    private Component[] buttons;
    private final CardLayout cardLayout;
    private final Order order;
    private final DatMonPanel pnParent;
    private final ButtonGroup btGroup = new ButtonGroup();
    private final List<Product_Order> listToAdd = new ArrayList<>();
    private final List<Product_Order> listToUpdate = new ArrayList<>();
    private final List<Product_Order> listToDelete = new ArrayList<>();
    private final List<Product> products;
    private final List<Category> categorys;
    private final List<Product_Order> product_Orders;
    private static final ProductService productService;
    private static final OrderService orderService;
    private static final CategoryService categoryService;
    private static final ProductOrderService productOrderService;
    private static final TableService tableService;
    String payString;

    static {
        productService = new ProductServiceImpl();
        orderService = new OrderServiceImpl();
        categoryService = new CategoryServiceImpl();
        productOrderService = new ProductOrderServiceImpl();
        tableService = new TableServiceImpl();

    }

    public AddMealDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        pnParent = null;
        products = productService.getAll();
        categorys = categoryService.getAll();
        order = new Order();
        product_Orders = new ArrayList<>();
        initComponents();
        cardLayout = (CardLayout) pnProduct.getLayout();
        buttons = null;
        setComponents();
        setEvent();
    }

    public AddMealDialog(JPanel parent, boolean modal, Order order) {
        this.setModal(modal);
        this.pnParent = (DatMonPanel) parent;
        products = productService.getAll();
        categorys = categoryService.getAll();
        this.order = order;
        product_Orders = productOrderService.getAll(order.getId_Order());
        initComponents();
        cardLayout = (CardLayout) pnProduct.getLayout();
        buttons = null;
        setComponents();
        setEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnProduct = new javax.swing.JPanel();
        pnBotton = new javax.swing.JPanel();
        pnRight = new javax.swing.JPanel();
        pnRight_Botton = new javax.swing.JPanel();
        btConfirm = new javax.swing.JButton();
        lbSum = new javax.swing.JLabel();
        lbAmount = new javax.swing.JLabel();
        lbPay = new javax.swing.JLabel();
        tfVat = new javax.swing.JTextField();
        pnCaledar = new javax.swing.JPanel();
        lbDay = new javax.swing.JLabel();
        lbYear = new javax.swing.JLabel();
        lbMonth = new javax.swing.JLabel();
        lbDayOfWeek = new javax.swing.JLabel();
        btOrder = new javax.swing.JButton();
        lbTableName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnInfor = new javax.swing.JPanel();
        pnTop = new javax.swing.JPanel();
        tfSearch = new javax.swing.JTextField();
        kbKind = new javax.swing.JLabel();
        cbKind = new javax.swing.JComboBox<>();
        lbSort = new javax.swing.JLabel();
        cbSort = new javax.swing.JComboBox<>();
        lbSearch = new javax.swing.JLabel();
        btReverse = new javax.swing.JButton();
        btLeft = new javax.swing.JButton();
        btRight = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(56, 180, 123));
        setResizable(false);

        pnProduct.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct.setAutoscrolls(true);
        pnProduct.setLayout(new java.awt.CardLayout());

        pnBotton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        pnRight.setPreferredSize(new java.awt.Dimension(600, 859));

        pnRight_Botton.setBackground(new java.awt.Color(255, 255, 255));

        btConfirm.setBackground(new java.awt.Color(56, 180, 123));
        btConfirm.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btConfirm.setForeground(new java.awt.Color(255, 255, 255));
        btConfirm.setText("Xác Nhận");
        btConfirm.setBorderPainted(false);

        lbSum.setBackground(new java.awt.Color(255, 255, 255));
        lbSum.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbSum.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "VNĐ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Tahoma", 1, 11)), "Tổng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        lbSum.setOpaque(true);

        lbAmount.setBackground(new java.awt.Color(255, 255, 255));
        lbAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAmount.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Số Lượng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        lbAmount.setOpaque(true);

        lbPay.setBackground(new java.awt.Color(255, 255, 255));
        lbPay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbPay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPay.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "VNĐ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Tahoma", 1, 11)), "Thành Tiền", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        lbPay.setOpaque(true);

        tfVat.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tfVat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfVat.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "VAT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        tfVat.setEnabled(false);

        pnCaledar.setBackground(new java.awt.Color(56, 180, 123));

        lbDay.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        lbDay.setForeground(new java.awt.Color(204, 204, 204));
        lbDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lbYear.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lbYear.setForeground(new java.awt.Color(204, 204, 204));
        lbYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lbMonth.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lbMonth.setForeground(new java.awt.Color(204, 204, 204));
        lbMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lbDayOfWeek.setBackground(new java.awt.Color(24, 134, 85));
        lbDayOfWeek.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lbDayOfWeek.setForeground(new java.awt.Color(255, 255, 255));
        lbDayOfWeek.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDayOfWeek.setOpaque(true);

        javax.swing.GroupLayout pnCaledarLayout = new javax.swing.GroupLayout(pnCaledar);
        pnCaledar.setLayout(pnCaledarLayout);
        pnCaledarLayout.setHorizontalGroup(
            pnCaledarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbDayOfWeek, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnCaledarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCaledarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbYear, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(lbMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbDay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnCaledarLayout.setVerticalGroup(
            pnCaledarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCaledarLayout.createSequentialGroup()
                .addComponent(lbDayOfWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDay, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btOrder.setBackground(new java.awt.Color(56, 180, 123));
        btOrder.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btOrder.setForeground(new java.awt.Color(255, 255, 255));
        btOrder.setText("Đặt Trước");
        btOrder.setBorderPainted(false);
        btOrder.setEnabled(false);

        javax.swing.GroupLayout pnRight_BottonLayout = new javax.swing.GroupLayout(pnRight_Botton);
        pnRight_Botton.setLayout(pnRight_BottonLayout);
        pnRight_BottonLayout.setHorizontalGroup(
            pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnRight_BottonLayout.createSequentialGroup()
                .addComponent(pnCaledar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(btConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfVat, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnRight_BottonLayout.setVerticalGroup(
            pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnRight_BottonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSum, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnRight_BottonLayout.createSequentialGroup()
                        .addComponent(lbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbPay, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(tfVat, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(pnCaledar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        lbTableName.setFont(new java.awt.Font("Tahoma", 1, 60)); // NOI18N
        lbTableName.setForeground(new java.awt.Color(56, 180, 123));
        lbTableName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTableName.setText("Bàn 5");
        lbTableName.setOpaque(true);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 0, new java.awt.Color(153, 153, 153)));
        jScrollPane1.setViewportView(null);

        pnInfor.setLayout(new javax.swing.BoxLayout(pnInfor, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pnInfor);

        javax.swing.GroupLayout pnRightLayout = new javax.swing.GroupLayout(pnRight);
        pnRight.setLayout(pnRightLayout);
        pnRightLayout.setHorizontalGroup(
            pnRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbTableName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnRight_Botton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnRightLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnRightLayout.setVerticalGroup(
            pnRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRightLayout.createSequentialGroup()
                .addComponent(lbTableName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(pnRight_Botton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tfSearch.setFont(new java.awt.Font("Tahoma", 2, 19)); // NOI18N
        tfSearch.setForeground(new java.awt.Color(153, 153, 153));
        tfSearch.setText("Nhập vào tên cần tìm kiếm");

        kbKind.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        kbKind.setText("Loại :");

        cbKind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbSort.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        lbSort.setText("Sắp Xếp :");

        cbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btReverse.setFocusPainted(false);

        javax.swing.GroupLayout pnTopLayout = new javax.swing.GroupLayout(pnTop);
        pnTop.setLayout(pnTopLayout);
        pnTopLayout.setHorizontalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(kbKind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbKind, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btReverse, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(lbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnTopLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btReverse, lbSearch});

        pnTopLayout.setVerticalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSort, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnTopLayout.createSequentialGroup()
                        .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(kbKind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbKind)
                                .addComponent(lbSort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                            .addComponent(btReverse, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnTopLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btReverse, lbSearch});

        btLeft.setBackground(new java.awt.Color(255, 255, 255));
        btLeft.setBorderPainted(false);
        btLeft.setFocusPainted(false);

        btRight.setBackground(new java.awt.Color(255, 255, 255));
        btRight.setBorderPainted(false);
        btRight.setFocusPainted(false);

        javax.swing.GroupLayout pnMainLayout = new javax.swing.GroupLayout(pnMain);
        pnMain.setLayout(pnMainLayout);
        pnMainLayout.setHorizontalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnBotton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                        .addComponent(btLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnTop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRight, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btLeft, btRight});

        pnMainLayout.setVerticalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(297, 297, 297)
                                .addComponent(btLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(pnProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(289, 289, 289)
                                .addComponent(btRight, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnBotton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnMainLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btLeft, btRight});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 14, Short.MAX_VALUE)
                .addComponent(pnMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 3, Short.MAX_VALUE)
                .addComponent(pnMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddMealDialog dialog = new AddMealDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConfirm;
    private javax.swing.JButton btLeft;
    private javax.swing.JButton btOrder;
    private javax.swing.JButton btReverse;
    private javax.swing.JButton btRight;
    private javax.swing.JComboBox<String> cbKind;
    private javax.swing.JComboBox<String> cbSort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kbKind;
    private javax.swing.JLabel lbAmount;
    private javax.swing.JLabel lbDay;
    private javax.swing.JLabel lbDayOfWeek;
    private javax.swing.JLabel lbMonth;
    private javax.swing.JLabel lbPay;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JLabel lbSort;
    private javax.swing.JLabel lbSum;
    private javax.swing.JLabel lbTableName;
    private javax.swing.JLabel lbYear;
    private javax.swing.JPanel pnBotton;
    private javax.swing.JPanel pnCaledar;
    private javax.swing.JPanel pnInfor;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnProduct;
    private javax.swing.JPanel pnRight;
    private javax.swing.JPanel pnRight_Botton;
    private javax.swing.JPanel pnTop;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfVat;
    // End of variables declaration//GEN-END:variables

    private void setComponents() {

        setIcon();
        setpnInfor();
        List<MealPanel> mealPanels = products.stream()
                .map(MealPanel::new)
                .collect(Collectors.toList());
        addComponentsIn_pnProduct(mealPanels);
        setpnBotton();
        setlbTableName();
        setcbKind();
        setcbSort();
        setpnRight_Botton();
        setpnCaledar();
        setbtOrder();
    }

    private void addComponentsIn_pnProduct(List<MealPanel> mealPanels) {

        SubAddMealPanel subAddMealPanel = new SubAddMealPanel();
        currentAmount++;
        JRadioButton radioBt = new JRadioButton();
        int maxComponent = subAddMealPanel.MAX_COMPONENT_AMOUNT;

        if (mealPanels.size() <= maxComponent) {
            subAddMealPanel.addComponens(mealPanels);
            addNewPage(subAddMealPanel, radioBt);
        }
        if (mealPanels.size() > maxComponent) {
            List<MealPanel> addedList = mealPanels.subList((currentAmount - 1) * maxComponent, currentAmount * maxComponent);
            subAddMealPanel.addComponens(addedList);
            addNewPage(subAddMealPanel, radioBt);
            mealPanels.removeAll(addedList);
            addComponentsIn_pnProduct(mealPanels);
        }
        radioBt.addMouseListener(RadioBtEvent(radioBt.getActionCommand()));
        subAddMealPanelEvent(subAddMealPanel);
    }

    private MouseListener RadioBtEvent(String actionCommand) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                cardLayout.show(pnProduct, actionCommand + "");
                currentIndex = Integer.parseInt(actionCommand);
            }
        };
    }

    private void addNewPage(SubAddMealPanel subAddMealPanel, JRadioButton radioBt) {
        
        pnProduct.add(subAddMealPanel, (currentAmount) + "");
        radioBt.setText("");
        radioBt.setActionCommand(currentAmount + "");
        btGroup.add(radioBt);
        pnBotton.add(radioBt);

    }

    private void setEvent() {
        btRightEvent();
        btLeftEvent();
        tfSearchEvent();
        cbKindEvent();
        cbSortEvent();
        btReverseEvent();
        btConfirmEvent();
        btOrderEvent();
    }

    private void btRightEvent() {
        btRight.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (currentIndex != currentAmount) {
                    cardLayout.show(pnProduct, (++currentIndex) + "");
                    for (int i = 0; i < buttons.length; i++) {
                        JRadioButton radioButton = (JRadioButton) buttons[i];
                        if (radioButton.getActionCommand().equals(currentIndex + "")) {
                            radioButton.setSelected(true);
                        }
                    }
                }
            }
        });
    }

    private void btLeftEvent() {
        btLeft.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (currentIndex != 1) {
                    cardLayout.show(pnProduct, (--currentIndex) + "");
                    for (int i = 0; i < buttons.length; i++) {
                        JRadioButton radioButton = (JRadioButton) buttons[i];
                        if (radioButton.getActionCommand().equals(currentIndex + "")) {
                            radioButton.setSelected(true);
                        }
                    }
                }
            }
        });
    }

    private void setpnInfor() {
        product_Orders.forEach(t -> {
            InforMealPanel inforMealPanel = new InforMealPanel(t);
            pnInfor.add(inforMealPanel);
            btRemoveEvent(inforMealPanel);
            spAmountEvent(inforMealPanel);
        });
    }

    private void btRemoveEvent(InforMealPanel inforMealPanel) {
        inforMealPanel.getButtonRemove().addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                pnInfor.remove(inforMealPanel);
                Product_Order product_Order = inforMealPanel.getProduct_Order();
                product_Orders.remove(product_Order);
                setpnRight_Botton();
                pnInfor.validate();
                pnInfor.repaint();
            }
        });
    }

    private void spAmountEvent(InforMealPanel inforMealPanel) {
        JSpinner spAmount = (JSpinner) inforMealPanel.getspAmount();
        spAmount.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int amount = (Integer) spAmount.getValue();
                inforMealPanel.setAmount(amount);
                Product_Order product_Order = inforMealPanel.getProduct_Order();
                product_Order.setAmount(amount);
                inforMealPanel.setlbSum();
                setpnRight_Botton();
            }
        });
    }

    private void setIcon() {
        final String imageDirURL = URL_Factory.IMAGE_FOLDER_URL;

        btLeft.setIcon(ImageUtils.loadImage(imageDirURL + "left.png"));
        btRight.setIcon(ImageUtils.loadImage(imageDirURL + "right.png"));
        lbSearch.setIcon(ImageUtils.loadImage(imageDirURL + "search.png"));
        btReverse.setIcon(ImageUtils.loadImage(imageDirURL + "reverse.png"));
    }

    private void setpnBotton() {
        buttons = pnBotton.getComponents();

        for (int i = 0; i < buttons.length; i++) {
            JRadioButton radioButton = (JRadioButton) buttons[i];
            if (radioButton.getActionCommand().equals("1")) {
                radioButton.setSelected(true);
            }
        }
    }

    private void subAddMealPanelEvent(SubAddMealPanel subAddMealPanel) {
        Component[] productPanel = subAddMealPanel.getComponents();
        Arrays.stream(productPanel).forEach(p -> {
            MealPanel mealPanel = (MealPanel) p;
            Product selectedProduct = mealPanel.getProduct();
            mealPanel.getbtMinus().addMouseListener(btMinusEvent(selectedProduct, mealPanel.getbtMinus()));
            mealPanel.getbtPlus().addMouseListener(btPlusEvent(selectedProduct, mealPanel.getbtPlus()));
        });
    }

    private MouseListener btPlusEvent(Product selectedProduct, JButton button) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                btOrder.setEnabled(false);
                Component[] components = pnInfor.getComponents();
                List<InforMealPanel> list = Arrays.stream(components).map(t -> (InforMealPanel) t)
                        .collect(Collectors.toList());
                InforMealPanel inforMealPanel = list.stream().filter(t -> t.getProduct_Order().getProduct().equals(selectedProduct))
                        .findAny().orElse(null);
                if (inforMealPanel != null) {
                    inforMealPanel.setAmount(inforMealPanel.getAmount() + 1);
                    inforMealPanel.setspAmount();
                    spAmountEvent(inforMealPanel);
                } else {
                    Product_Order product_Order = new Product_Order(order, 1, LocalDateTime.now(), selectedProduct);
                    InforMealPanel newInforMealPanel = new InforMealPanel(product_Order);
                    btRemoveEvent(newInforMealPanel);
                    spAmountEvent(newInforMealPanel);
                    product_Orders.add(product_Order);
                    pnInfor.add(newInforMealPanel);
                    pnInfor.revalidate();
                    pnInfor.repaint();
                    setpnRight_Botton();
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(new Color(233, 210, 159));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(new Color(240, 240, 240));
            }

        };

    }

    private MouseListener btMinusEvent(Product selectedProduct, JButton button) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                Component[] components = pnInfor.getComponents();
                Arrays.stream(components).forEach(t -> {
                    InforMealPanel inforMealPanel = (InforMealPanel) t;
                    Product_Order product_Order = inforMealPanel.getProduct_Order();
                    if (product_Order.getProduct().equals(selectedProduct)) {
                        inforMealPanel.setAmount(inforMealPanel.getAmount() - 1);
                        inforMealPanel.setspAmount();
                    }
                });
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(new Color(230, 213, 185));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(new Color(240, 240, 240));
            }
        };
    }

    private void setlbTableName() {
        lbTableName.setText(order.getTable().getName());
    }

    private void setcbKind() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        Category category = new Category();
        category.setId(0);
        comboBoxModel.addElement(category);
        addElementCBKind(comboBoxModel);
        cbKind.setModel(comboBoxModel);
        cbKind.setRenderer(new ButtonRender());
        cbKind.setFont(new Font("Tahoma", Font.PLAIN, 26));
    }

    private void addElementCBKind(DefaultComboBoxModel comboBoxModel) {
        categorys.forEach(t -> {
            comboBoxModel.addElement(t);
        });
    }

    private void setcbSort() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        List<String> strings = Arrays.asList("Không", "Theo Tên", "Theo Giá");
        strings.forEach(t -> {
            comboBoxModel.addElement(t);
        });
        cbSort.setModel(comboBoxModel);
        cbSort.setFont(new Font("Tahoma", Font.PLAIN, 26));
        DefaultListCellRenderer listCellRenderer = new DefaultListCellRenderer();
        listCellRenderer.setHorizontalAlignment(DefaultListCellRenderer.CENTER);
        cbSort.setRenderer(listCellRenderer);
    }

    private void tfSearchEvent() {
        tfSearch.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                tfSearch.setText("");
                tfSearch.setForeground(new Color(0, 0, 0));
                Font currentFont = tfSearch.getFont();
                tfSearch.setFont(currentFont.deriveFont(Font.PLAIN));
                tfSearch.setHorizontalAlignment(JTextField.CENTER);
            }
        });
        tfSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {

                String searchString = tfSearch.getText();
                String regex = "\\s*";
                    if (!searchString.matches(regex)) {
                        products.clear();
                        products.addAll(productService.getAll(searchString));
                        UpdateComponet_pnProduct();
                    }if("".equals(searchString)){
                        products.clear();
                        products.addAll(productService.getAll());
                        UpdateComponet_pnProduct();
                    }
            }
        });

    }

    private void cbKindEvent() {
        cbKind.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Category category = (Category) cbKind.getSelectedItem();
                products.clear();
                if (category.getId() == 0) {
                    products.addAll(productService.getAll());
                } else {
                    products.addAll(productService.getAll(category.getId()));
                }
                UpdateComponet_pnProduct();
            }
        });

    }

    private void UpdateComponet_pnProduct() {
        currentAmount = 0;
        currentIndex = 1;
        pnProduct.removeAll();
        pnBotton.removeAll();
        List<MealPanel> mealPanels = products.stream().map(MealPanel::new).collect(Collectors.toList());
        addComponentsIn_pnProduct(mealPanels);
        pnProduct.revalidate();
        pnProduct.repaint();
        setpnBotton();
        pnBotton.revalidate();
        pnBotton.repaint();
    }

    private void cbSortEvent() {
        cbSort.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String string = (String) cbSort.getSelectedItem();
                if ("Theo Tên".equals(string)) {
                    products.sort(Comparator.comparing(Product::getName));
                    UpdateComponet_pnProduct();
                }
                if ("Theo Giá".equals(string)) {
                    products.sort(Comparator.comparing(Product::getPrice));
                    UpdateComponet_pnProduct();
                }
                if ("Không".equals(string)) {
                    products.clear();
                    products.addAll(productService.getAll());
                    UpdateComponet_pnProduct();
                }
            }
        });

    }

    private void btReverseEvent() {
        btReverse.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                Collections.reverse(products);
                UpdateComponet_pnProduct();
            }

        });
    }

    private void setpnRight_Botton() {
        vat = 10;
        final Locale locale = new Locale("vi", "VN");
        final NumberFormat format = NumberFormat.getNumberInstance(locale);
        orderAmount = product_Orders.stream().mapToInt(Product_Order::getAmount).sum();
        lbAmount.setText(orderAmount + "");
        sum = product_Orders.stream().mapToDouble(t -> t.getAmount() * t.getProduct().getPrice()).reduce(0, Double::sum);
        String stringVat = vat + " %";
        tfVat.setText(stringVat);
        String sumString = format.format(sum);
        lbSum.setText(sumString);
        pay = sum * (100 + vat) / 100;
        payString = format.format(pay);
        lbPay.setText(payString);
    }

    private void btConfirmEvent() {
        btConfirm.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                List<Product_Order> temp = productOrderService.getAll(order.getId_Order());
                setData(temp, product_Orders);
                TableButton button = pnParent.getSelectedButton();
                if ("".equals(button.getActionCommand())) {
                    TableStatus tableStatus = new TableStatus();
                    order.setTime(LocalDateTime.now());
                    int idOrder = orderService.add(order);
                    order.setId_Order(idOrder);
                    tableStatus.setId(TableStatus.FULL);
                    order.getTable().setStatus(tableStatus);
                    tableService.update(order.getTable());
                    listToAdd.forEach(t -> {
                        t.getOrder().setId_Order(idOrder);
                        productOrderService.add(t);
                    });
                } else {
                    listToAdd.forEach(t -> productOrderService.add(t));
                    listToDelete.forEach(t -> productOrderService.delete(t.getOrder().getId_Order(), t.getProduct().getId()));
                    listToUpdate.forEach(t -> productOrderService.update(t));
                }
                pnParent.updateLayout(order);
                AddMealDialog.this.dispose();
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                btConfirm.setBackground(new Color(212, 212, 165));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btConfirm.setBackground(new Color(56, 180, 123));
            }
        });
    }

    private void setData(List<Product_Order> start, List<Product_Order> end) {
        listToAdd.addAll(end);
        listToAdd.removeAll(start);
        listToDelete.addAll(start);
        listToDelete.removeAll(end);
        start.removeAll(listToDelete);
        listToUpdate.addAll(start);
    }

    private void setpnCaledar() {
        LocalDate localDate = LocalDate.now();
        int day = localDate.getDayOfMonth();
        String month = localDate.getMonth().toString();
        int year = localDate.getYear();
        String dayofweek = localDate.getDayOfWeek().toString();

        lbDay.setText(day + "");
        lbMonth.setText(month);
        lbYear.setText(year + "");
        lbDayOfWeek.setText(dayofweek);
    }

    private void btOrderEvent() {
        btOrder.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (btOrder.isEnabled()) {
                    Table table = order.getTable();
                    table.getStatus().setId(TableStatus.ORDERED);
                    tableService.update(table);
                    order.getTable().copy(table);
                    pnParent.updateLayout(order);
                    AddMealDialog.this.dispose();
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                if (btOrder.isEnabled()) {
                    btOrder.setBackground(new Color(212, 212, 165));
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btOrder.setBackground(new Color(56, 180, 123));
            }

        });
    }

    private void setbtOrder() {
        int idStatusOrder = order.getTable().getStatus().getId();
        if (idStatusOrder == TableStatus.EMPTY) {
            btOrder.setEnabled(true);
        }
    }

}
